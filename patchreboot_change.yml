---
- hosts: all
  become: true
  gather_facts: true
  vars_prompt:
    - name: ptime
      prompt: "Please enter pause time in minutes:"
      private: no
      default: 30

  tasks:
    - name: Check login users
      register: users
      shell: "users"
      ignore_errors: true

    - debug:
        msg: "{{ users.stdout }}"

    - name: Clean up var to allow room for updates
      shell: yum clean all

    - name: Sending warning message to users
      shell: wall "Warning message, this system will be restarted in {{ ptime }} minutes, please save your work and log out."
      ignore_errors: true

    - name: Waiting for {{ ptime }} minutes before reboot
      pause:
        minutes: "{{ ptime }}"
      ignore_errors: true
      delegate_to: localhost


    - name: "Starting patching change"
      block:
        - name: Apply all patches
          yum:
            name: '*'
            state: latest
          register: yum_update
          ignore_errors: true
          notify:
           - Reboot Server

        - name: Check if yum update failed
          fail:
            msg: "yum update report on server {{ inventory_hostname }} message: {{ yum_update.msg }}"
          when: yum_update.failed == 0
          ignore_errors: true

        - name: Run yum update with --skip-broken option
          yum:
            name: '*'
            state: latest
            skip_broken: true
          when: yum_update.failed
          register: yum_update_skip_broken
          notify:
            - Reboot Server

        - name: Just checking the errors
          ansible.builtin.debug:
            var: yum_update

        - name: Check if yum update with --skip-broken option failed
          fail:
            vars:
              skip_broken_failed: True
            msg: "yum update with --skip-broken failed on {{ inventory_hostname }} with error message: {{ yum_update_skip_broken.stdout }}"
          when: yum_update_skip_broken.stdout is defined and 'rror'  in yum_update_skip_broken.stdout
          ignore_errors: true

    - name: Execute the uptime script
      async: 45
      poll: 5
      register: uptimelog
      shell: "/usr/bin/cut -d. -f1 /proc/uptime"
      ignore_errors: true

    - name: Calculate uptime in minutes
      set_fact:
        uptime_minutes: "{{ uptimelog.stdout | int // 60 }}"

    - debug:
        msg: "The server {{ ansible_hostname }} is on {{ ansible_distribution }} {{ ansible_distribution_version }}, kernel version {{ ansible_kernel }} and up for {{ uptime_minutes }} minutes"


  handlers:
    - name: Reboot Server
      reboot:
